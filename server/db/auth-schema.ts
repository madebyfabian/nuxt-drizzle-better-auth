/**
 * This schema was generated by the Better-Auth CLI
 * @see https://www.better-auth.com/docs/concepts/cli
 * The only thing modified was the cuid2 id by default.
 */
import { pgTable, text, timestamp, boolean, integer } from 'drizzle-orm/pg-core'
import { createId } from '@paralleldrive/cuid2'

export const user = pgTable('user', {
	id: text('id').primaryKey().$defaultFn(createId),
	name: text('name').notNull(),
	email: text('email').notNull().unique(),
	emailVerified: boolean('emailVerified').notNull(),
	image: text('image'),
	createdAt: timestamp('createdAt').notNull(),
	updatedAt: timestamp('updatedAt').notNull(),
})

export const session = pgTable('session', {
	id: text('id').primaryKey().$defaultFn(createId),
	expiresAt: timestamp('expiresAt').notNull(),
	token: text('token').notNull().unique(),
	createdAt: timestamp('createdAt').notNull(),
	updatedAt: timestamp('updatedAt').notNull(),
	ipAddress: text('ipAddress'),
	userAgent: text('userAgent'),
	userId: text('userId')
		.notNull()
		.references(() => user.id),
})

export const account = pgTable('account', {
	id: text('id').primaryKey().$defaultFn(createId),
	accountId: text('accountId').notNull(),
	providerId: text('providerId').notNull(),
	userId: text('userId')
		.notNull()
		.references(() => user.id),
	accessToken: text('accessToken'),
	refreshToken: text('refreshToken'),
	idToken: text('idToken'),
	accessTokenExpiresAt: timestamp('accessTokenExpiresAt'),
	refreshTokenExpiresAt: timestamp('refreshTokenExpiresAt'),
	scope: text('scope'),
	password: text('password'),
	createdAt: timestamp('createdAt').notNull(),
	updatedAt: timestamp('updatedAt').notNull(),
})

export const verification = pgTable('verification', {
	id: text('id').primaryKey().$defaultFn(createId),
	identifier: text('identifier').notNull(),
	value: text('value').notNull(),
	expiresAt: timestamp('expiresAt').notNull(),
	createdAt: timestamp('createdAt'),
	updatedAt: timestamp('updatedAt'),
})

export const passkey = pgTable('passkey', {
	id: text('id').primaryKey().$defaultFn(createId),
	name: text('name'),
	publicKey: text('publicKey').notNull(),
	userId: text('userId')
		.notNull()
		.references(() => user.id),
	credentialID: text('credentialID').notNull(),
	counter: integer('counter').notNull(),
	deviceType: text('deviceType').notNull(),
	backedUp: boolean('backedUp').notNull(),
	transports: text('transports'),
	createdAt: timestamp('createdAt'),
})
